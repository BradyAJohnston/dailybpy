name: Build Blender bpy Module

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch: # Allow manual triggering

jobs:
  check-beta:
    runs-on: ubuntu-latest
    outputs:
      beta_active: ${{ steps.check.outputs.beta_active }}
      beta_branch: ${{ steps.check.outputs.beta_branch }}
      beta_version: ${{ steps.check.outputs.beta_version }}
    steps:
      - name: Check if beta period is active
        id: check
        run: |
          # Find any blender-v*-release branches
          BETA_BRANCH=$(git ls-remote --heads https://github.com/blender/blender.git | grep -o 'blender-v[0-9.]*-release' | tail -n1)

          if [ -n "$BETA_BRANCH" ]; then
            echo "Found beta branch: $BETA_BRANCH"

            # Extract version number (e.g., "5.0" from "blender-v5.0-release")
            VERSION=$(echo "$BETA_BRANCH" | sed 's/blender-v\([0-9.]*\)-release/\1/')
            echo "Beta version: $VERSION"

            # Check if stable release tag exists (e.g., v5.0.0)
            if git ls-remote --tags https://github.com/blender/blender.git | grep -q "refs/tags/v${VERSION}.0$"; then
              echo "Stable v${VERSION}.0 released - beta period over"
              echo "beta_active=false" >> $GITHUB_OUTPUT
            else
              echo "Beta period active for v${VERSION}"
              echo "beta_active=true" >> $GITHUB_OUTPUT
              echo "beta_branch=$BETA_BRANCH" >> $GITHUB_OUTPUT
              echo "beta_version=$VERSION" >> $GITHUB_OUTPUT
            fi
          else
            echo "No beta branch found"
            echo "beta_active=false" >> $GITHUB_OUTPUT
          fi

  build-linux:
    needs: check-beta
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - branch: main
            suffix: ""
          - branch: ${{ needs.check-beta.outputs.beta_branch }}
            suffix: "-beta"
            version: ${{ needs.check-beta.outputs.beta_version }}
    steps:
      - name: Checkout Blender repository
        # Skip beta build if beta is not active
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        uses: actions/checkout@v4
        with:
          repository: "blender/blender"
          ref: ${{ matrix.branch }}
          fetch-depth: 1 # Shallow clone
          submodules: "recursive"

      - name: Set up Python
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake git subversion \
            libx11-dev libxxf86vm-dev libxcursor-dev libxi-dev \
            libxrandr-dev libxinerama-dev libegl-dev \
            libwayland-dev wayland-protocols libxkbcommon-dev libdbus-1-dev linux-libc-dev

      - name: Update libraries
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        run: |
          make update

      - name: Build bpy module
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        run: |
          make bpy

      - name: Create wheel package
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        run: |
          python -m pip install wheel setuptools
          python ./build_files/utils/make_bpy_wheel.py ../build_linux_bpy/bin/

      - name: Copy wheel to workspace
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        run: |
          mkdir -p ./dist
          cp ../build_linux_bpy/bin/bpy-*.whl ./dist/

      - name: Upload wheel as artifact
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: bpy-linux-x64${{ matrix.suffix }}
          path: ./dist/*.whl
          retention-days: 30

  build-macos-arm:
    needs: check-beta
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - branch: main
            suffix: ""
          - branch: ${{ needs.check-beta.outputs.beta_branch }}
            suffix: "-beta"
            version: ${{ needs.check-beta.outputs.beta_version }}
    steps:
      - name: Checkout Blender repository
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        uses: actions/checkout@v4
        with:
          repository: "blender/blender"
          ref: ${{ matrix.branch }}
          fetch-depth: 1 # Shallow clone
          submodules: "recursive"

      - name: Set up Python
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # cmake already installed on GHA runners
      # - name: Install dependencies
      #   run: |
      #     brew install cmake

      - name: Update libraries
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        run: |
          make update

      - name: Build bpy module
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        run: |
          make bpy

      - name: Create wheel package
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        run: |
          python -m pip install wheel setuptools
          python ./build_files/utils/make_bpy_wheel.py ../build_darwin_bpy/bin/

      - name: Copy wheel to workspace
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        run: |
          mkdir -p ./dist
          cp ../build_darwin_bpy/bin/bpy-*.whl ./dist/

      - name: Upload wheel as artifact
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: bpy-macos-arm64${{ matrix.suffix }}
          path: ./dist/*.whl
          retention-days: 30

  build-windows:
    needs: check-beta
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - branch: main
            suffix: ""
          - branch: ${{ needs.check-beta.outputs.beta_branch }}
            suffix: "-beta"
            version: ${{ needs.check-beta.outputs.beta_version }}
    steps:
      - name: Checkout Blender repository
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        uses: actions/checkout@v4
        with:
          repository: "blender/blender"
          ref: ${{ matrix.branch }}
          fetch-depth: 1 # Shallow clone
          submodules: "recursive"

      - name: Set up Python
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up Visual Studio
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        uses: microsoft/setup-msbuild@v2

      - name: Update libraries
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        shell: powershell
        run: |
          "y" | cmd /c make.bat update

      - name: Build bpy module
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        shell: cmd
        run: |
          make.bat bpy

      - name: Find build directory
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        shell: powershell
        run: |
          $buildDir = Get-ChildItem -Path .. -Directory -Filter "build_windows*" | Select-Object -First 1 -ExpandProperty Name
          echo "BUILD_DIR=$buildDir" >> $env:GITHUB_ENV

      - name: Debug - List build directory contents
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        shell: powershell
        run: |
          Write-Host "Contents of ../$env:BUILD_DIR/bin:"
          Get-ChildItem -Path "..\$env:BUILD_DIR\bin" -Recurse -Depth 2 | Select-Object FullName

      - name: Create wheel package
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        shell: powershell
        run: |
          python -m pip install wheel setuptools
          $binPath = "..\$env:BUILD_DIR\bin\Release"
          if (-not (Test-Path $binPath)) {
            $binPath = "..\$env:BUILD_DIR\bin"
          }
          Write-Host "Using bin path: $binPath"
          python .\build_files\utils\make_bpy_wheel.py $binPath

      - name: Copy wheel to workspace
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path .\dist
          $binPath = "..\$env:BUILD_DIR\bin\Release"
          if (-not (Test-Path $binPath)) {
            $binPath = "..\$env:BUILD_DIR\bin"
          }
          Copy-Item -Path "$binPath\bpy-*.whl" -Destination .\dist\

      - name: Upload wheel as artifact
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: bpy-windows-x64${{ matrix.suffix }}
          path: ./dist/*.whl
          retention-days: 30

  create-release:
    needs: [check-beta, build-linux, build-macos-arm, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Delete old releases
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get all releases sorted by creation date, skip the first 3 (keep most recent)
          gh release list --repo ${{ github.repository }} --limit 100 --json tagName,createdAt --jq 'sort_by(.createdAt) | reverse | .[3:] | .[].tagName' | while read tag; do
            echo "Deleting old release: $tag"
            gh release delete "$tag" --repo ${{ github.repository }} --yes
          done

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: bpy-*
          path: ./artifacts

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Organize artifacts
        run: |
          mkdir -p ./release-artifacts
          # Copy all wheel files from all artifacts
          find ./artifacts -name "*.whl" -exec cp {} ./release-artifacts/ \;
          echo "Release artifacts:"
          ls -la ./release-artifacts/

      - name: Determine release name
        id: release_name
        run: |
          if [ "${{ needs.check-beta.outputs.beta_active }}" == "true" ]; then
            echo "name=Daily Build ${{ steps.date.outputs.date }} (Alpha + Beta v${{ needs.check-beta.outputs.beta_version }})" >> $GITHUB_OUTPUT
            echo "body=Automated daily builds of \`bpy\` including:
            - **Alpha builds** from main branch
            - **Beta v${{ needs.check-beta.outputs.beta_version }} builds** from ${{ needs.check-beta.outputs.beta_branch }} branch

            ## Installation
            \`\`\`bash
            pip install bpy --extra-index-url https://bradyajohnston.github.io/dailybpy/
            \`\`\`" >> $GITHUB_OUTPUT
          else
            echo "name=Daily Build ${{ steps.date.outputs.date }} (Alpha)" >> $GITHUB_OUTPUT
            echo "body=Automated daily alpha builds of \`bpy\` from main branch

            ## Installation
            \`\`\`bash
            pip install bpy --extra-index-url https://bradyajohnston.github.io/dailybpy/
            \`\`\`" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: daily-${{ steps.date.outputs.date }}
          name: ${{ steps.release_name.outputs.name }}
          body: ${{ steps.release_name.outputs.body }}
          draft: false
          prerelease: false
          files: |
            ./release-artifacts/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
